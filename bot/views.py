import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot import types
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from .conf import bot
from .models import Start, WhyWe, Resume, LaborMarket, Interview, Contact, UserProfile
import os
from django.conf import settings
from django.core.files.storage import FileSystemStorage
from django.core.files import File
from django.db.models.signals import post_save
from django.dispatch import receiver
from .models import Offer
from django.db.models import ObjectDoesNotExist
from django.db.models import Q


@csrf_exempt
def telegram_webhook(request):
    if request.method == 'POST':
        update = telebot.types.Update.de_json(request.body.decode('utf-8'))
        bot.process_new_updates([update])
        return HttpResponse('')
    return HttpResponse('Invalid request method')


@bot.message_handler(commands=['start'])
def start(message):
    start_obj = Start.objects.first()
    name = message.chat.username
    chat_id = message.chat.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∑–∞ –π–æ–≥–æ telegram_id
    try:
        user = UserProfile.objects.get(telegram_id=chat_id)
    except UserProfile.DoesNotExist:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = UserProfile.objects.create(telegram_id=chat_id, username=name)

    if start_obj:
        bot.send_message(message.chat.id, start_obj.text, reply_markup=create_reply_markup())

def create_reply_markup():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    send_resume = KeyboardButton('üë®‚Äçüíª –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ä–µ–∑—é–º–µ ')
    work_market = KeyboardButton('üìä –ê–Ω–∞–ª—ñ–∑ —Ä–∏–Ω–∫—É –ø—Ä–∞—Ü—ñ ')
    interview = KeyboardButton('üìå –õ–∞–π—Ñ—Ö–∞–∫–∏ –¥–ª—è —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∏  ')
    contact = KeyboardButton('üëã –ó–≤\'—è–∑–∞—Ç–∏—Å—è –∑ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º ')
    why_we = KeyboardButton('ü§î –ß–æ–º—É –º–∏? ü§î')
    markup.add(send_resume, work_market, interview, contact, why_we)
    return markup


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if message.text == '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ä–µ–∑—é–º–µ –¥–ª—è –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è':
        bot.send_message(message.chat.id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —Å–≤–æ—î —Ä–µ–∑—é–º–µ")
    elif message.text == '–î—ñ–∑–Ω–∞—Ç–∏—Å—è —â–æ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –Ω–∞ —Ä–∏–Ω–∫—É –ø—Ä–∞—Ü—ñ':
        labor_market = LaborMarket.objects.first()
        if labor_market:
            bot.send_message(message.chat.id, labor_market.text)
    elif message.text == '–õ–∞–π—Ñ—Ö–∞–∫–∏, —è–∫ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏—Å—è –¥–æ —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∏':
        interview = Interview.objects.first()
        if interview:
            bot.send_message(message.chat.id, interview.text)
    elif message.text == '–ó–≤\'—è–∑–∞—Ç–∏—Å—è –∑ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º':
        bot.send_message(message.chat.id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç")
        bot.register_next_step_handler(message, handle_contact)
    elif message.text == '–ß–æ–º—É –º–∏?':
        why_we = WhyWe.objects.first()
        if why_we:
            bot.send_message(message.chat.id, why_we.text)


@bot.message_handler(content_types=['document', 'photo'])
def handle_resume(message):
    if message.document:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        file_path = os.path.join(settings.MEDIA_ROOT, message.document.file_name)
        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        user_name = message.from_user.username

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞–Ω—É (state)
        button_options = [
            '–ö–æ–ª–µ–∫—Ç–∏–≤',
            '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞ –∫—É–ª—å—Ç—É—Ä–∞',
            '–ó–∞—Ä–æ–±—ñ—Ç–Ω–∞ –ø–ª–∞—Ç–∞',
            '–õ–æ–∫–∞—Ü—ñ—è',
            "–ö–∞—Ä'—î—Ä–Ω–∏–π —Ä—ñ—Å—Ç",
            '–ù–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è',
            '–†–æ–±–æ—Ç–∞ –±–µ–∑ –¥–æ—Å–≤—ñ–¥—É'
        ]
        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        for option in button_options:
            markup.add(KeyboardButton(option))
        markup.add(KeyboardButton('–ó–±–µ—Ä–µ–≥—Ç–∏ –≤–∏–±—ñ—Ä'))
        bot.send_message(message.chat.id, "–î—è–∫—É—é! –ü–æ–∫–∏ –æ–ø—Ä–∞—Ü—å–æ–≤—É—é, –≤–∫–∞–∂–∏, —â–æ –Ω–∞–π–≥–æ–ª–æ–≤–Ω—ñ—à–µ –¥–ª—è —Ç–µ–±–µ –≤ –ø–æ—à—É–∫–∞—Ö —Ä–æ–±–æ—Ç–∏",
                         reply_markup=markup)
        bot.register_next_step_handler(message, handle_resume_options, user_name, file_path, [], button_options)
    else:
        bot.send_message(message.chat.id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —É –≤–∏–≥–ª—è–¥—ñ —Ñ–∞–π–ª—É")




def handle_resume_options(message, user_name, file_path, selected_options, button_options):
    preference = message.text

    if preference == '–ó–±–µ—Ä–µ–≥—Ç–∏ –≤–∏–±—ñ—Ä':
        if len(selected_options) == 0:
            bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –≤–∞—Ä—ñ–∞–Ω—Ç.")
            return
        selected_options_text = ", ".join(selected_options)
        resume_obj = Resume.objects.create(user=user_name, resume_file=file_path)
        resume_obj.preference = selected_options_text
        resume_obj.save()

        bot.send_message(message.chat.id, f"–í–∏ –æ–±—Ä–∞–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏: {selected_options_text}. –î—è–∫—É—é!")

        button_options_skills = [
            '–ö–æ–º—É–Ω—ñ–∫–∞–±–µ–ª—å–Ω—ñ—Å—Ç—å (–Ω–∞)',
            '–®–≤–∏–¥–∫–æ –Ω–∞–≤—á–∞—é—Å—è',
            '–°—Ç—Ä–µ—Å–æ—Å—Ç—ñ–π–∫—ñ—Å—Ç—å',
            '–ë–∞–≥–∞—Ç–æ–∑–∞–¥–∞—á–Ω—ñ—Å—Ç—å',
            '–í–ø–µ–≤–Ω–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ü–ö',
            '–í–æ–ª–æ–¥—ñ—é –∑–Ω–∞–Ω–Ω—è–º CRM',
            '–ì—Ä–∞–º–æ—Ç–Ω–∞ –º–æ–≤–∞',
            '–†–æ–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ',
            '–í–æ–ª–æ–¥—ñ–Ω–Ω—è —Ñ–æ—Ç–æ—à–æ–ø–æ–º',
            '–í–∏—Ä—ñ—à–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ–π',
            '–ö—Ä–∏—Ç–∏—á–Ω–µ –º–∏—Å–ª–µ–Ω–Ω—è',
            '–í–º—ñ–Ω–Ω—è –¥–æ—Å—è–≥–∞—Ç–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—Ö —Ü—ñ–ª–µ–π',
            '–°–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞',
            '–ü—É–Ω–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—å'
        ]
        markup_skills = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        for option in button_options_skills:
            markup_skills.add(KeyboardButton(option))
        markup_skills.add(KeyboardButton('–ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–≤–∏—á–∫–∏'))
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—ñ –Ω–∞–≤–∏—á–∫–∏", reply_markup=markup_skills)
        bot.register_next_step_handler(message, handle_resume_skills, user_name, file_path, [], button_options_skills)

        return

    selected_options.append(preference)
    button_options.remove(preference)

    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    for option in button_options:
        markup.add(KeyboardButton(option))
    markup.add(KeyboardButton('–ó–±–µ—Ä–µ–≥—Ç–∏ –≤–∏–±—ñ—Ä'))
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —â–µ –æ–¥–∏–Ω –≤–∞—Ä—ñ–∞–Ω—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–±–µ—Ä–µ–≥—Ç–∏ –≤–∏–±—ñ—Ä'", reply_markup=markup)
    bot.register_next_step_handler(message, handle_resume_options, user_name, file_path, selected_options,
                                   button_options)


def handle_resume_skills(message, user_name, file_path, selected_skills, button_options_skills):
    skill = message.text

    if skill == '–ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–≤–∏—á–∫–∏':
        if len(selected_skills) == 0:
            bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É –Ω–∞–≤–∏—á–∫—É.")
            return
        selected_skills_text = ", ".join(selected_skills)

        try:
            resume = Resume.objects.filter(user=user_name, resume_file=file_path).last()
            resume.skills = selected_skills_text
            resume.save()
        except ObjectDoesNotExist:
            resume = Resume.objects.create(user=user_name, resume_file=file_path, skills=selected_skills_text)

        bot.send_message(message.chat.id, f"–í–∞—à—ñ –Ω–∞–≤–∏—á–∫–∏ –±—É–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ: {selected_skills_text}. –î—è–∫—É—é!")
        bot.send_message(message.chat.id, f"–í–∫–∞–∂–∏ –∑–Ω–∞–Ω–Ω—è —ñ–Ω–æ–∑–µ–º–Ω–∏—Ö –º–æ–≤. –î–ª—è –±–∞–≥–∞—Ç—å–æ—Ö –∫–æ–º–ø–∞–Ω—ñ–π —Ü–µ –ø–ª—é—Å")
        bot.register_next_step_handler(message, handle_tongue, user_name)
        return

    selected_skills.append(skill)

    if skill in button_options_skills:
        button_options_skills.remove(skill)

    markup_skills = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    for option in button_options_skills:
        markup_skills.add(KeyboardButton(option))
    markup_skills.add(KeyboardButton('–ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–≤–∏—á–∫–∏'))
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —â–µ –æ–¥–Ω—É –Ω–∞–≤–∏—á–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–≤–∏—á–∫–∏'",
                     reply_markup=markup_skills)
    bot.register_next_step_handler(message, handle_resume_skills, user_name, file_path, selected_skills,
                                   button_options_skills)


def handle_tongue(message, user_name):
    tongue_info = message.text

    try:
        resume = Resume.objects.filter(user=user_name).last()
        resume.tongue = tongue_info
        resume.save()
        bot.send_message(message.chat.id, "–î—è–∫—É—é! –í–∞—à–∞ –∑–∞—è–∫–∞ —É—Å–ø—É—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞, –æ—á—ñ–∫—É–π—Ç–µ –∑–≤–æ—Ä–æ—Ç–Ω—å–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
        start(message)
    except ObjectDoesNotExist:
        bot.send_message(message.chat.id, "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∑—é–º–µ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")


def handle_contact(message):
    user_name = message.from_user.username
    contact_info = message.text

    contact_obj = Contact.objects.create(user=user_name, contact=contact_info)

    bot.send_message(message.chat.id, "–î—è–∫—É—é! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")


@receiver(post_save, sender=Offer)
def send_offer_notification(sender, instance, created, **kwargs):
    if created:
        message_text = f"üì• –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üì•\n\n{instance.text}\n"

        keyboard = InlineKeyboardMarkup()
        contact_button = InlineKeyboardButton("–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–º", callback_data='contact_recruiter')
        keyboard.add(contact_button)

        bot.send_message(instance.user.telegram_id, message_text, reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'contact_recruiter')
def contact_recruiter_callback(call):
    bot.send_message(call.message.chat.id, "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç")
    bot.register_next_step_handler(call.message, handle_text)


def handle_text(message):
    user_name = message.from_user.username
    contact_info = message.text

    contact_obj = Contact.objects.create(user=user_name, contact=contact_info)

    bot.send_message(message.chat.id, "–î—è–∫—É—é! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
